/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{
         <JUMP: "jump" >
        | <WALK: "walk" >
        | <LEAP: "leap" >
        | <TURN: "turn" >
         | <TURNTO: "turnto" >
        | <DROP: "drop" >
        | <GET: "get" >
        | <GRAB: "grab" >
        | <LETGO: "letgo" >
        | <NOP: "nop" >
        | <IF: "if" >
        | <ELSE: "else" >
        | <WHILE: "while" >
        | <REPEAT: "repeat" >
        | <TIMES: "times" >
        | <FACING: "facing" >
        | <CAN: "can" >
        | <NOT: "not" >
        | <TEST: "test">

}



TOKEN:
{

		 <DEFVAR: "defvar" >
        | <DEFPROC: "defproc">
        | <NORTH: "north">
        | <SOUTH: "south">
        | <EAST: "east">
        | <WEST: "west">
        | <FRONT: "front">
        | <RIGHT: "right">
        | <LEFT: "left">
        | <BACK: "back">
//        | <LP: "(" >
//        | <RP: ")" >

}


TOKEN :
{
		<NUM: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
        
}


TOKEN:
{
  <#letra: ["a"-"z","A"-"Z"]>
	| <STR: <letra>(<letra>|<NUM>)* >
}


//boolean command(uniandes.lym.robot.view.Console sistema) :
//	boolean command(Console sistema):
//	{	
//		
//		int x,y;
//		salida=new String();	
//	}
//
//	
//	{
//		(
//		  (
//		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
//		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
//		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
//		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
//		|  <PUT> "("  put() ")"					  			
//		|  <PICK> "(" get()  ")"	
//	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
//		) ";" 
//
//		{
//		    try {
//	    			 Thread.sleep(900);
//	    	    } catch (InterruptedException e) {
//	    			        System.err.format("IOException: %s%n", e);
//	    		    }
//	    			 
//			sistema.printOutput(salida);
//			return true;
//		})+
//
//    	| <EOF> {return false;} 
//	}

boolean command(Console sistema): //command es nuestro main
	{	
		
		int x,y;
		salida=new String();	
	}

	{
		(
		  (
		   simpleCommand()
		| <DEFPROC><STR> (("("((<STR>|<NUM>)(","(<STR>|<NUM>))*)*")")|("()"))  "{"block()"}"
		| 	<DEFVAR><STR>x=num()

		) 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

void block():
	{	
		
		int x,y;	
	}

	{
		(
		  (
		    simpleCommand()
		  | conditional()
		  | loop()
		  | repeatTimes()
		  ) 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    } 	
		})
		(";"(
		    simpleCommand()
		  | conditional()
		  | loop()
		  | repeatTimes()
		  )		)*
 
	}



void pruebas():
	{
	 int x;
	}
	{
	  x=num(){world.left();salida= "Command: left test";}
	}



void jump():
	{
	  int x,y;
	}
	{
	  x=num() "," y=num() {world.setPostion(x,y);salida = "Command: Jump";}
	}

void walk():
	{
	  int x;
	}
	{
	  x=num()
	 (
	   (")"{world.moveForward(x,false);salida = "Command: Walk";})
	 | 
	   (	   ","
	   (
	     <FRONT>{world.moveForward(x, false);salida = "Command: Walk F";}
	   | <BACK>{world.moveForward(-x, false);salida = "Command: Walk B";}
	   | <RIGHT>{world.moveForward(x, false);salida = "Command: Walk R";}
	   | <LEFT>{world.moveForward(-x, false);salida = "Command: Walk L";}
	   
	   | <NORTH>{world.moveVertically(-x, false);salida = "Command: Walk N";}
	   | <SOUTH>{world.moveVertically(x, false);salida = "Command: Walk S";}
	   |<EAST>{world.moveHorizontally(x, false);salida = "Command: Walk E";}
	   | <WEST>{world.moveHorizontally(-x, false);salida = "Command: Walk W";}	   )")"
	  
	  )
	  )
	}


void leap():
{
	  int x;
	}
	{
	  x=num()
	 (
	   (")"{world.moveForward(x,true);salida = "Command: Leap";})
	 | 
	   (
	   ","
	   (
	     <FRONT>{world.moveForward(x, true);salida = "Command: Leap F";}
	   | <BACK>{world.moveForward(-x, true);salida = "Command: Leap B";}
	   | <RIGHT>{world.moveForward(x, true);salida = "Command: Leap R";}
	   | <LEFT>{world.moveForward(-x, true);salida = "Command: Leap L";}
	   
	   | <NORTH>{world.moveVertically(-x, true);salida = "Command: Leap N";}
	   | <SOUTH>{world.moveVertically(x, true);salida = "Command: Leap S";}
	   |<EAST>{world.moveHorizontally(x, true);salida = "Command: Leap E";}
	   | <WEST>{world.moveHorizontally(-x, true);salida = "Command: Leap W";}
	   )")"
	  
	  )
	  )
	}

void turn():
	{ }
	{
	 <RIGHT> {world.turnRight();salida = "Command: turn R";}
	| <LEFT> {world.turnRight();salida = "Command: turn L";}	    
	}

void turnTo():
	{ }
	{
	 
	 <NORTH>{world.turnRight();salida = "Command: turnTo N";}
	| <SOUTH>{world.turnRight();salida = "Command: turnTo S";}
	| <EAST>{world.turnRight();salida = "Command: turnTo E";}
	| <WEST>{world.turnRight();salida = "Command: turnTo W";} }


void drop():
	{ int x=1;}
	{
	 x=num() {world.putChips(x);salida = "Command: Drop Chips";}  
	}

void get():
	{ int x=1;}
	{
	 x=num() {world.pickChips(x);salida = "Command: Pick chips";}  
	}

void grab():
	{ int f=1;}
	{
	 f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";}  
	}

void letGo():
	{ int f=1;}
	{
	 f=num() {world.putBalloons(f); salida = "Command: Put Balloons";}  
	}

void facing():
	{
	}
	{
	  < NORTH >|<SOUTH>| <EAST> | <WEST>
	}

void can():
	{
	}
	{
	  simpleCommand()
	}

void not():
	{
	}
	{
	  <FACING>"("facing()")"
	  |<CAN>"(" can() ")"
	}

void condition():
	{
	}
	{
	  <FACING>"("facing()")"
	| <CAN>"(" can() ")"
	|  < NOT >":"not()
	}

void conditional():
	{
	}
	{
	  <IF>condition() "{"block()"}" < ELSE > "{"block()"}"
	}
void loop():
	{
	}
	{
	  <WHILE>condition() "{"block()"}"
	}

void repeatTimes():
	{
	  int x;
	}
	{
	  <REPEAT>x = num()<TIMES>"{"block()"}"
	}

void simpleCommand():
	{
	  int x,y;
	}
	{
	  <JUMP>  "(" jump()")"
		| <WALK> "(" walk()
		| <LEAP> "(" leap()
		| 	<TURN>  "(" turn()")"
		| 	<TURNTO>  "(" turnTo() ")"
		| 	<DROP>  "(" drop() ")"
		| 	<GET>  "(" get() ")"
		| 	<GRAB>  "(" grab() ")"
		| 	<LETGO>  "(" letGo() ")"
		| 	<NOP>  ("()"|"(" ")")
		| <STR>"="x = num()
		| <TEST>  "(" pruebas() ")"
	}
//boolean command(Console sistema):
//	{	
//		
//		int x,y;
//		salida=new String();	
//	}
//
//	{
//		(
//		  (
//		   <JUMP>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}
//		| <TURN> "(right)" {world.turnRight();salida = "Command: Turnright";}
//		| 	<GRAB>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
//		| 	<DROP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";} 
//		) ";" 
//
//		{
//		    try {
//	    			 Thread.sleep(900);
//	    	    } catch (InterruptedException e) {
//	    			        System.err.format("IOException: %s%n", e);
//	    		    }
//	    			 
//			sistema.printOutput(salida);
//			return true;
//		})+
//
//    	| <EOF> {return false;} 
//	}

//	void put() :
//	{
//		int f=1;	
//	}
//	{
//		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
//		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 
//
//	}
//
//	void get() :
//	{
//		int f=1;	
//	}
//	{
//		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
//		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 
//
//	}

//VAMO A HACE UNA NUEVA GRAM
	/**
	
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	