/* Robot.java */
/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {


        private RobotWorldDec world;


        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida=new String();
        HashMap<String, Integer> variables = new HashMap<>();
        HashMap<String, Integer> defProc = new HashMap<>();

  final public boolean command(Console sistema) throws ParseException {int x,y;
                String nom;
                salida=new String();
                boolean ejecutar  = true;
                boolean posible;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case JUMP:
    case WALK:
    case LEAP:
    case TURN:
    case TURNTO:
    case DROP:
    case GET:
    case GRAB:
    case LETGO:
    case NOP:
    case IF:
    case REPEAT:
    case DEFVAR:
    case DEFPROC:
    case STR:
    case 38:{
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case JUMP:
        case WALK:
        case LEAP:
        case TURN:
        case TURNTO:
        case DROP:
        case GET:
        case GRAB:
        case LETGO:
        case NOP:
        case STR:{
          posible = simpleCommand(ejecutar);
          break;
          }
        case DEFPROC:{
          jj_consume_token(DEFPROC);
          defProc(ejecutar);
          break;
          }
        case DEFVAR:{
          jj_consume_token(DEFVAR);
          nom = nombre();
          x = num();
variables.put(nom,x);
                  salida="Command: definir variable ";
          break;
          }
        case IF:{
          conditional();
          break;
          }
        case 38:{
          jj_consume_token(38);
          block(ejecutar);
          jj_consume_token(39);
          break;
          }
        case REPEAT:{
          repeatTimes();
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
try {
                                 Thread.sleep(900);
                    } catch (InterruptedException e) {
                                        System.err.format("IOException: %s%n", e);
                            }

                        sistema.printOutput(salida);
                        {if ("" != null) return true;}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case JUMP:
        case WALK:
        case LEAP:
        case TURN:
        case TURNTO:
        case DROP:
        case GET:
        case GRAB:
        case LETGO:
        case NOP:
        case IF:
        case REPEAT:
        case DEFVAR:
        case DEFPROC:
        case STR:
        case 38:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void block(boolean ejecutar) throws ParseException {int x,y;
                boolean posible;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case JUMP:
    case WALK:
    case LEAP:
    case TURN:
    case TURNTO:
    case DROP:
    case GET:
    case GRAB:
    case LETGO:
    case NOP:
    case STR:{
      posible = simpleCommand(ejecutar);
      break;
      }
    case IF:{
      conditional();
      break;
      }
    case WHILE:{
      loop();
      break;
      }
    case REPEAT:{
      repeatTimes();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
try {
                                 Thread.sleep(900);
                    } catch (InterruptedException e) {
                                        System.err.format("IOException: %s%n", e);
                            }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 40:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(40);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case JUMP:
      case WALK:
      case LEAP:
      case TURN:
      case TURNTO:
      case DROP:
      case GET:
      case GRAB:
      case LETGO:
      case NOP:
      case STR:{
        posible = simpleCommand(ejecutar);
        break;
        }
      case IF:{
        conditional();
        break;
        }
      case WHILE:{
        loop();
        break;
        }
      case REPEAT:{
        repeatTimes();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void defProc(boolean ejecutar) throws ParseException {int x;
         String nom;
    nom = nombre();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 41:{
      jj_consume_token(41);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUM:
        case STR:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        x = valor();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 42:{
            ;
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            break label_4;
          }
          jj_consume_token(42);
          x = valor();
        }
      }
      jj_consume_token(43);
      break;
      }
    case 44:{
      jj_consume_token(44);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(38);
    block(ejecutar);
    jj_consume_token(39);
}

  final public boolean jump(boolean ejecutar) throws ParseException {int x,y;
          boolean posible = true;
    x = valor();
    jj_consume_token(42);
    y = valor();
if(ejecutar) {
              try {
                if(x!= -1 && y!=-1) {
                world.setPostion(x,y);salida = "Command: Jump"; }
                else { salida= "Variable no definida";}
                        }

            catch(Error e) {
              posible = false;
              salida = "Comando no ejecutable\n"+e;
              }
                }
            {if ("" != null) return posible;}
    throw new Error("Missing return statement in function");
}

  final public boolean walk(boolean ejecutar) throws ParseException {int x=0;
          boolean facing;
          boolean posible= true;
          String command = "";
    x = valor();
command = "front";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 42:{
      jj_consume_token(42);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FRONT:{
        jj_consume_token(FRONT);
command = "front";
        break;
        }
      case BACK:{
        jj_consume_token(BACK);
command = "back";
        break;
        }
      case RIGHT:{
        jj_consume_token(RIGHT);
command = "right";
        break;
        }
      case LEFT:{
        jj_consume_token(LEFT);
command = "left";
        break;
        }
      case NORTH:{
        jj_consume_token(NORTH);
command = "north";
        break;
        }
      case SOUTH:{
        jj_consume_token(SOUTH);
command = "south";
        break;
        }
      case EAST:{
        jj_consume_token(EAST);
command = "east";
        break;
        }
      case WEST:{
        jj_consume_token(WEST);
command = "west";
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
if(ejecutar) {
           if(x== -1) {salida="variable no definida";}
           else if(command == "front") {
             try {
             world.moveForward(x,false);salida = "Command: Walk F";}
                catch(Error e) {
                  posible = false;
                  salida = "Comando no ejecutable\n"+e; }
                  }
                else if(command == "back") {
             try {
             world.moveForward(-x,false);salida = "Command: Walk B";}
                catch(Error e) {
                  posible = false;
                  salida = "Comando no ejecutable\n"+e; }
             }
             else if(command == "right") {
             try {
             world.moveHorizontally(x,false);salida = "Command: Walk R";}
                catch(Error e) {
                  posible = false;
                 salida = "Comando no ejecutable\n"+e; }
             }
              else if(command == "left") {
             try {
             world.moveHorizontally(-x,false);salida = "Command: Walk L";}
                catch(Error e) {
                  posible = false;
                 salida = "Comando no ejecutable\n"+e; }
             }
             else if(command == "north") {
             try {
             facing = world.facingNorth();
                while(facing == false)
                        {world.turnRight();
                facing = world.facingNorth();
                        }
             world.moveForward(x, false);
             salida = "Command: Walk N";}
                catch(Error e) {
                  posible = false;
                 salida = "Comando no ejecutable\n"+e; }
             }
             else if(command == "south") {
             try {
             facing = world.facingSouth();
                while(facing == false)
                        {world.turnRight();
                facing = world.facingSouth();
                        }
             world.moveForward(x, false);
             salida = "Command: Walk S";}
                catch(Error e) {
                  posible = false;
                 salida = "Comando no ejecutable\n"+e; }
             }
              else if(command == "east") {
             try {
             facing = world.facingEast();
                while(facing == false)
                        {world.turnRight();
                facing = world.facingEast();
                        }
             world.moveForward(x, false);
             salida = "Command: Walk E";}
                catch(Error e) {
                  posible = false;
                  salida = "Comando no ejecutable\n"+e; }
             }
             else if(command == "west") {
             try {
             facing = world.facingWest();
                while(facing == false)
                        {world.turnRight();
                facing = world.facingWest();
                        }
             world.moveForward(x, false);
             salida = "Command: Walk W";}
                catch(Error e) {
                  posible = false;
                  salida = "Comando no ejecutable\n"+e; }
             }
         }
           {if ("" != null) return posible;}
    throw new Error("Missing return statement in function");
}

  final public boolean leap(boolean ejecutar) throws ParseException {int x=0;
          boolean facing;
          boolean posible= true;
          String command = "";
    x = valor();
command = "front";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 42:{
      jj_consume_token(42);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FRONT:{
        jj_consume_token(FRONT);
command = "front";
        break;
        }
      case BACK:{
        jj_consume_token(BACK);
command = "back";
        break;
        }
      case RIGHT:{
        jj_consume_token(RIGHT);
command = "right";
        break;
        }
      case LEFT:{
        jj_consume_token(LEFT);
command = "left";
        break;
        }
      case NORTH:{
        jj_consume_token(NORTH);
command = "north";
        break;
        }
      case SOUTH:{
        jj_consume_token(SOUTH);
command = "south";
        break;
        }
      case EAST:{
        jj_consume_token(EAST);
command = "east";
        break;
        }
      case WEST:{
        jj_consume_token(WEST);
command = "west";
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
if(ejecutar) {
           if(x== -1) {salida="variable no definida";}
           else if(command == "front") {
             try {
             world.moveForward(x,true);salida = "Command: Walk F";}
                catch(Error e) {
                  posible = false;
                  salida = "Comando no ejecutable\n"+e; }
                  }
                else if(command == "back") {
             try {
             world.moveForward(-x,true);salida = "Command: Walk B";}
                catch(Error e) {
                  posible = false;
                  salida = "Comando no ejecutable\n"+e; }
             }
             else if(command == "right") {
             try {
             world.moveHorizontally(x,true);salida = "Command: Walk R";}
                catch(Error e) {
                  posible = false;
                 salida = "Comando no ejecutable\n"+e; }
             }
              else if(command == "left") {
             try {
             world.moveHorizontally(-x,true);salida = "Command: Walk L";}
                catch(Error e) {
                  posible = false;
                 salida = "Comando no ejecutable\n"+e; }
             }
             else if(command == "north") {
             try {
             facing = world.facingNorth();
                while(facing == false)
                        {world.turnRight();
                facing = world.facingNorth();
                        }
             world.moveForward(x, true);
             salida = "Command: Walk N";}
                catch(Error e) {
                  posible = false;
                 salida = "Comando no ejecutable\n"+e; }
             }
             else if(command == "south") {
             try {
             facing = world.facingSouth();
                while(facing == false)
                        {world.turnRight();
                facing = world.facingSouth();
                        }
             world.moveForward(x, true);
             salida = "Command: Walk S";}
                catch(Error e) {
                  posible = false;
                 salida = "Comando no ejecutable\n"+e; }
             }
              else if(command == "east") {
             try {
             facing = world.facingEast();
                while(facing == false)
                        {world.turnRight();
                facing = world.facingEast();
                        }
             world.moveForward(x, true);
             salida = "Command: Walk E";}
                catch(Error e) {
                  posible = false;
                  salida = "Comando no ejecutable\n"+e; }
             }
             else if(command == "west") {
             try {
             facing = world.facingWest();
                while(facing == false)
                        {world.turnRight();
                facing = world.facingWest();
                        }
             world.moveForward(x, true);
             salida = "Command: Walk W";}
                catch(Error e) {
                  posible = false;
                  salida = "Comando no ejecutable\n"+e; }
             }
         }
           {if ("" != null) return posible;}
    throw new Error("Missing return statement in function");
}

  final public boolean turn(boolean ejecutar) throws ParseException {boolean posible = true;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RIGHT:{
      jj_consume_token(RIGHT);
if(ejecutar) {
                world.turnRight();salida = "Command: turn R";
                }
        {if ("" != null) return posible;}
      break;
      }
    case LEFT:{
      jj_consume_token(LEFT);
if(ejecutar) {
          world.turnRight();world.turnRight();world.turnRight();
          salida = "Command: turn L"; }
          {if ("" != null) return posible;}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean turnTo(boolean ejecutar) throws ParseException {boolean facing;
        boolean posible= true;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NORTH:{
      jj_consume_token(NORTH);
if (ejecutar) {
           facing = world.facingNorth();
         while(facing == false)
         {      world.turnRight();
            facing = world.facingNorth();
           }
         salida = "Command: turnTo N";
                }
        {if ("" != null) return posible;}
      break;
      }
    case SOUTH:{
      jj_consume_token(SOUTH);
if (ejecutar) {
          facing = world.facingSouth();
         while(facing == false)
         {      world.turnRight();
            facing = world.facingSouth();
           }
         salida = "Command: turnTo S"; }
         {if ("" != null) return posible;}
      break;
      }
    case EAST:{
      jj_consume_token(EAST);
if (ejecutar) {
          facing = world.facingEast();
                 while(facing == false)
                 {      world.turnRight();
                    facing = world.facingEast();
                   }
                 salida = "Command: turnTo E"; }
        {if ("" != null) return posible;}
      break;
      }
    case WEST:{
      jj_consume_token(WEST);
if (ejecutar) {
          facing = world.facingWest();
                 while(facing == false)
                 {      world.turnRight();
                    facing = world.facingWest();
                   }
                 salida = "Command: turnTo W"; }
        {if ("" != null) return posible;}
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean drop(boolean ejecutar) throws ParseException {int x=1;
         String nom;
         boolean posible = true;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      x = num();
if (ejecutar) {
           try {
              world.putChips(x);salida = "Command: Drop Chips"; }
           catch(Error e) {
                  posible = false;
                  salida = "Comando no ejecutable\n"+e;
                }
           }
         {if ("" != null) return posible;}
      break;
      }
    case STR:{
      nom = nombre();
if(ejecutar) {
                        boolean isVarDef1 = variables.containsKey(nom);
                        if (isVarDef1)
                                {try
                                  {
                                  world.putChips(variables.get(nom));salida = "Command: Drop Chips";
                                   }
                                 catch(Error e) {
                                   posible = false;
                                   salida = "Comando no ejecutable\n"+e;
                                 }
                                }
                        else
                        {
                        salida= "Error. Variable no definida";
                        }
                        }
                 {if ("" != null) return posible;}
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean get(boolean ejecutar) throws ParseException {int x=1;
          String nom;
          boolean posible = true;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      x = num();
if(ejecutar) {
           try {
           world.pickChips(x);salida = "Command: Pick chips"; }
           catch(Error e) {
             posible = false;
                 salida = "Comando no ejecutable\n"+e;
             }
            }
          {if ("" != null) return posible;}
      break;
      }
    case STR:{
      nom = nombre();
if(ejecutar) {
                        boolean isVarDef1 = variables.containsKey(nom);
                        if (isVarDef1)
                                {try
                                  {
                                  world.pickChips(variables.get(nom));salida = "Command: Pick chips";
                                   }
                                 catch(Error e) {
                                   posible = false;
                                   salida = "Comando no ejecutable\n"+e;
                                 }
                                }
                        else
                        {
                        salida= "Error. Variable no definida";
                        }
                        }
                 {if ("" != null) return posible;}
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean grab(boolean ejecutar) throws ParseException {int f=1;
        String nom;
        boolean posible = true;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      f = num();
if(ejecutar) {
           try {
             world.grabBalloons(f);salida="Command:  Pick balloons";
           }
           catch(Error e) {
             posible = false;
                 salida = "Comando no ejecutable\n"+e;
              }
            }
          {if ("" != null) return posible;}
      break;
      }
    case STR:{
      nom = nombre();
if(ejecutar) {
                        boolean isVarDef1 = variables.containsKey(nom);
                        if (isVarDef1)
                                {try
                                  {
                                  world.grabBalloons(variables.get(nom));salida = "Command:  Pick balloons";
                                   }
                                 catch(Error e) {
                                   posible = false;
                                   salida = "Comando no ejecutable\n"+e;
                                 }
                                }
                        else
                        {
                        salida= "Error. Variable no definida";
                        }
                        }
                 {if ("" != null) return posible;}
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean letGo(boolean ejecutar) throws ParseException {int f=1;
        String nom;
          boolean posible = true;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      f = num();
if(ejecutar) {
           try {
           world.putBalloons(f); salida = "Command: Put Balloons"; }
           catch(Error e) {
             posible = false;
                 salida = "Comando no ejecutable\n"+e;
              }
           }
          {if ("" != null) return posible;}
      break;
      }
    case STR:{
      nom = nombre();
if(ejecutar) {
                        boolean isVarDef1 = variables.containsKey(nom);
                        if (isVarDef1)
                                {try
                                  {
                                  world.putBalloons(variables.get(nom));salida = "Command: Put Balloons";
                                   }
                                 catch(Error e) {
                                   posible = false;
                                   salida = "Comando no ejecutable\n"+e;
                                 }
                                }
                        else
                        {
                        salida= "Error. Variable no definida";
                        }
                        }
                 {if ("" != null) return posible;}
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean facing() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NORTH:{
      jj_consume_token(NORTH);
{if ("" != null) return world.facingNorth();}
      break;
      }
    case SOUTH:{
      jj_consume_token(SOUTH);
{if ("" != null) return world.facingSouth();}
      break;
      }
    case EAST:{
      jj_consume_token(EAST);
{if ("" != null) return world.facingEast();}
      break;
      }
    case WEST:{
      jj_consume_token(WEST);
{if ("" != null) return world.facingWest();}
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean can() throws ParseException {boolean ejecutar = true;
          boolean posible;
    posible = simpleCommand(ejecutar);
{if ("" != null) return posible;}
    throw new Error("Missing return statement in function");
}

  final public boolean not() throws ParseException {boolean verificar;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FACING:{
      jj_consume_token(FACING);
      jj_consume_token(41);
      verificar = facing();
      jj_consume_token(43);
if(verificar == false) {
            verificar = true;}
           else { verificar = false;}
            {if ("" != null) return verificar;}
      break;
      }
    case CAN:{
      jj_consume_token(CAN);
      jj_consume_token(41);
      verificar = can();
      jj_consume_token(43);
if(verificar == false) {
            verificar = true;
            }
            else { verificar = false;}
            {if ("" != null) return verificar;}
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean condition() throws ParseException {boolean verificar = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FACING:{
      jj_consume_token(FACING);
      jj_consume_token(41);
      verificar = facing();
      jj_consume_token(43);
{if ("" != null) return verificar;}
      break;
      }
    case CAN:{
      jj_consume_token(CAN);
      jj_consume_token(41);
      verificar = can();
      jj_consume_token(43);
{if ("" != null) return verificar;}
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      jj_consume_token(45);
      verificar = not();
{if ("" != null) return verificar;}
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void conditional() throws ParseException {boolean verCond = false;
          boolean opuesto = true;
    jj_consume_token(IF);
    verCond = condition();
    jj_consume_token(38);
    block(verCond);
    jj_consume_token(39);
if(verCond == true) {
            salida = "condicion verdadera";
            opuesto = false;
            }
            else {
              salida = "condicion falsa";
              opuesto = true;
            }
    jj_consume_token(ELSE);
    jj_consume_token(38);
    block(opuesto);
    jj_consume_token(39);
}

  final public void loop() throws ParseException {
    jj_consume_token(WHILE);
    condition();
    jj_consume_token(38);
    block(true);
    jj_consume_token(39);
}

  final public void repeatTimes() throws ParseException {int x;
    jj_consume_token(REPEAT);
    x = num();
    jj_consume_token(TIMES);
    jj_consume_token(38);
    block(false);
    jj_consume_token(39);
}

  final public boolean simpleCommand(boolean ejecutar) throws ParseException {int x,y;
          boolean posible = true;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case JUMP:{
      jj_consume_token(JUMP);
      jj_consume_token(41);
      posible = jump(ejecutar);
      jj_consume_token(43);
      break;
      }
    case WALK:{
      jj_consume_token(WALK);
      jj_consume_token(41);
      posible = walk(ejecutar);
      jj_consume_token(43);
      break;
      }
    case LEAP:{
      jj_consume_token(LEAP);
      jj_consume_token(41);
      posible = leap(ejecutar);
      jj_consume_token(43);
      break;
      }
    case TURN:{
      jj_consume_token(TURN);
      jj_consume_token(41);
      posible = turn(ejecutar);
      jj_consume_token(43);
      break;
      }
    case TURNTO:{
      jj_consume_token(TURNTO);
      jj_consume_token(41);
      posible = turnTo(ejecutar);
      jj_consume_token(43);
      break;
      }
    case DROP:{
      jj_consume_token(DROP);
      jj_consume_token(41);
      posible = drop(ejecutar);
      jj_consume_token(43);
      break;
      }
    case GET:{
      jj_consume_token(GET);
      jj_consume_token(41);
      posible = get(ejecutar);
      jj_consume_token(43);
      break;
      }
    case GRAB:{
      jj_consume_token(GRAB);
      jj_consume_token(41);
      posible = grab(ejecutar);
      jj_consume_token(43);
      break;
      }
    case LETGO:{
      jj_consume_token(LETGO);
      jj_consume_token(41);
      posible = letGo(ejecutar);
      jj_consume_token(43);
      break;
      }
    case NOP:{
      jj_consume_token(NOP);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 44:{
        jj_consume_token(44);
        break;
        }
      case 41:{
        jj_consume_token(41);
        jj_consume_token(43);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case STR:{
      jj_consume_token(STR);
      jj_consume_token(46);
      x = num();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return posible;}
    throw new Error("Missing return statement in function");
}

//void comprobarSimpleCommand():
//	{
//	}
//	{
//	  <JUMP>"("(<NUM>|<STR>)","(<NUM>|<STR>)")"
//	  
//	  | <WALK> "(" <NUM> (","(<NORTH> |<SOUTH >|< EAST >|< WEST >
//	  |<RIGHT>|< FRONT >|< LEFT >|< BACK >)?")")
//	  
//	| <LEAP> "(" <NUM> (","(<NORTH> |<SOUTH >|< EAST >|< WEST >
//	  |<RIGHT>|< FRONT >|< LEFT >|< BACK >)?")")
//	  
//	| 	<TURN>  "("(<LEFT>|<RIGHT >)")"
//	
//	| 	<TURNTO>  "(" (<NORTH> |<SOUTH >|< EAST >|< WEST >)")"
//	
//	| 	<DROP>  "("<NUM>")"
//	
//	| 	<GET>  "("<NUM>")"
//	
//	| 	<GRAB>  "("<NUM>")"
//	
//	| 	<LETGO>  "("<NUM>")"
//	
//	| 	<NOP>  ("()"|"(" ")")
//	
//	| <STR>"="<NUM>
//	}

        /**
	
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */
  final public 
int num() throws ParseException, Error {int total=1;
    jj_consume_token(NUM);
try
                        {
                                total = Integer.parseInt(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                {if (true) throw new Error("Number out of bounds: "+token.image+" !!");}
                        }
                        {if ("" != null) return total;}
    throw new Error("Missing return statement in function");
}

  final public String nombre() throws ParseException {String tNom;
    jj_consume_token(STR);
tNom = token.image;
          {if ("" != null) return tNom;}
    throw new Error("Missing return statement in function");
}

  final public int valor() throws ParseException {int x=0;
  String nom="";
  int value;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STR:{
      nom = nombre();
      break;
      }
    case NUM:{
      x = num();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
boolean isVarDef=variables.containsKey(nom);
   if (isVarDef) {
     value = variables.get(nom);}
   else if(x != 0){ value = x;}
   else { value = -1; }
   {if ("" != null) return value;}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x304ffe0,0x304ffe0,0x304ffe1,0x6ffe0,0x0,0x6ffe0,0x0,0x0,0x0,0xfc000000,0x0,0xfc000000,0x0,0x80000000,0x3c000000,0x0,0x0,0x0,0x0,0x3c000000,0x300000,0x700000,0x0,0x7fe0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x60,0x60,0x60,0x20,0x100,0x20,0x24,0x400,0x1200,0x3,0x400,0x3,0x400,0x1,0x0,0x24,0x24,0x24,0x24,0x0,0x0,0x0,0x1200,0x20,0x24,};
	}

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RobotTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[47];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 25; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 47; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
